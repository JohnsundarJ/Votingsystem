{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","parameter","e","setState","operand1","target","value","state","languages","name","votes","sc","i","this","newLanguages","style","color","fontSize","justifyContent","alignItems","display","paddingLeft","paddingRight","className","map","lang","key","onClick","vote","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OA+DeA,G,kBA3Dd,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KAYNC,UAAU,SAACC,GACT,EAAKC,SAAS,CACbC,SAAUF,EAAEG,OAAOC,SAbtB,EAAKC,MAAQ,CACZC,UAAY,CACX,CAACC,KAAM,OAAQC,MAAO,GACtB,CAACD,KAAM,SAAUC,MAAO,GACxB,CAACD,KAAM,MAAOC,MAAO,GACrB,CAACD,KAAM,KAAMC,MAAO,IAErBN,SAAS,GACTO,GAAG,GAVa,E,kEAkBZC,GACJC,KAAKV,SAAS,CACbQ,GAAG,IAEL,IAAIG,EAAY,YAAOD,KAAKN,MAAMC,WAClCM,EAAaF,GAAGF,QAMdG,KAAKV,SAAS,CAACK,UAAWM,M,+BAIpB,IAAD,OACP,OACC,6BACC,wBAAIC,MAAO,CAAC,UAAY,IAAIC,MAAM,QAAQC,SAAS,SAAnD,2BACA,6BACA,yBAAKF,MAAO,CAACG,eAAe,SAASC,WAAW,SAASC,QAAQ,OAAOC,YAAY,MAAMC,aAAa,QACvG,yBAAKC,UAAU,aAEbV,KAAKN,MAAMC,UAAUgB,KAAI,SAACC,EAAMb,GAAP,OACxB,yBAAKc,IAAKd,EAAGW,UAAU,YACtB,yBAAKA,UAAU,aACbE,EAAKf,OAEP,yBAAKa,UAAU,gBACbE,EAAKhB,MAEP,4BAAQkB,QAAS,EAAKC,KAAKC,KAAK,EAAMjB,IAAtC,yB,GAlDUkB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4bf93d63.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport './App.css';\n\nclass App extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlanguages : [\n\t\t\t\t{name: \"Java\", votes: 0},\n\t\t\t\t{name: \"Python\", votes: 0},\n\t\t\t\t{name: \"Php\", votes: 0},\n\t\t\t\t{name: \"Go\", votes: 0}\n      ],\n\t\t\toperand1:'',\n\t\t\tsc:0\n\t\t}\n\t}\n  parameter=(e)=>{\n    this.setState({\n     operand1: e.target.value\n    });\n  }\n\tvote (i) {\n\t\t\tthis.setState({\n\t\t\t\tsc:1\n\t\t\t})\n\t\tlet newLanguages = [...this.state.languages];\n\t\tnewLanguages[i].votes++;\n\t\t// function swap(array, i, j) {\n\t\t// \tvar temp = array[i];\n\t\t// \tarray[i] = array[j];\n\t\t// \tarray[j] = temp;\n\t\t// }\n    this.setState({languages: newLanguages});\n\t\t\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<h1 style={{\"marginTop\":\"0\",color:\"black\",fontSize:\"35px\"}}>Vote for your Favourite</h1>\n\t\t\t\t<br />\n\t\t\t\t<div style={{justifyContent:\"center\",alignItems:\"center\",display:\"flex\",paddingLeft:\"5px\",paddingRight:\"5px\"}}>\n\t\t\t\t<div className=\"languages\">\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.languages.map((lang, i) => \n\t\t\t\t\t\t\t<div key={i} className=\"language\">\n\t\t\t\t\t\t\t\t<div className=\"voteCount\">\n\t\t\t\t\t\t\t\t\t{lang.votes}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"languageName\">\n\t\t\t\t\t\t\t\t\t{lang.name}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<button onClick={this.vote.bind(this, i)}>Click Here</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t</div>\n\t\t);\n\t}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}